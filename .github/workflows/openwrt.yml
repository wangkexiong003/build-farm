name: build openwrt packages

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: build(${{ matrix.target.name }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - name: 24.10.1-x86_64
            sdk_url: https://downloads.openwrt.org/releases/24.10.1/targets/x86/64/openwrt-sdk-24.10.1-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst
          - name: 24.10.1-mt7623
            sdk_url: https://downloads.openwrt.org/releases/24.10.1/targets/mediatek/mt7623/openwrt-sdk-24.10.1-mediatek-mt7623_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Prepare dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev file wget zstd

      - name: Restore cached build
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/openwrt-sdk
          key: openwrt-${{ matrix.target.name }}-${{ env.TIMESTAMP }}
          restore-keys: |
            key: openwrt-${{ matrix.target.name }}

      - name: Check cache
        run: |
          if [ ! -d openwrt-sdk ]; then
            wget "${{ matrix.target.sdk_url }}"
            tar --use-compress-program=zstd -xvf openwrt-sdk-*.tar.zst
            rm -rf *.tar.zst
            mv openwrt-sdk-* openwrt-sdk
          fi

      - name: Configure feeds
        run: |
          cd openwrt-sdk
          rm -rf bin tmp feeds package/* dl/*

          cp feeds.conf.default feeds.conf
          cat ${{ github.workspace }}/openwrt/feeds.conf >> feeds.conf
          FEEDS_EXTRA=$(awk '{print $2}' ${{ github.workspace }}/openwrt/feeds.conf | paste -sd ' ' | xargs)
          echo "FEEDS_EXTRA=${FEEDS_EXTRA}" >> ${GITHUB_ENV}
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          chmod +x ${{ github.workspace }}/openwrt/setup.sh
          ${{ github.workspace }}/openwrt/setup.sh "${PWD}"
          make defconfig

      - name: Build our feeds
        run: |
          cd openwrt-sdk
          for feed in ${FEEDS_EXTRA}; do
            for dir in feeds/${feed}/*; do
              if [ -d "${dir}" ] && [ -f "${dir}/Makefile" ]; then
                pkg=$(basename "${dir}")
                echo "===== Building ${pkg} from feed ${feed} ====="
                make package/${pkg}/compile V=s || echo "xxxxx Failed: ${pkg} xxxxx"
              fi
            done
          done

      - name: Prepare ipks for our feeds
        run: |
          mkdir -p ipks_feed
          mkdir -p ipks_built

          FEED_REGEXP=$(echo "${FEEDS_EXTRA}" | sed 's/ /\|/g')
          for ipk in $(find openwrt-sdk/bin -name *.ipk); do
            src=$(tar -xOf ${ipk} ./control.tar.gz | tar -xzOf - ./control | grep '^Source:' | awk -F: '{print $2}' | xargs)
            feed=$(echo "${src}" | cut -d'/' -f2)
            if echo "${feed}" | grep -Eq "^(${FEED_REGEXP})$"; then
              echo "+++ copy ${ipk} in ${feed}"
              mkdir -p "ipks_feed/${feed}"
              cp "${ipk}" "ipks_feed/${feed}"
              cp "${ipk}" ipks_built
            fi
          done

      - name: Build ripgrep(rust)
        run: |
          cd openwrt-sdk
          make package/ripgrep/compile V=s || echo "xxxxx Failed: ripgrep xxxxx"

      - name: Update build cache
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/openwrt-sdk
          key: ${{ steps.cache-restore.outputs.cache-primary-key }}

      - name: Check result
        run: |
          find openwrt-sdk/bin -name *.ipk

      - name: Make private opkg repository
        run: |
          docker run -v $PWD/ipks_built:/working alpine sh -c "
            echo https://dl-cdn.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories
            apk add opkg-utils
            opkg-make-index /working > /working/Packages
            gzip -k /working/Packages
          "

          if [[ -n "${USIGN_PRIVATE}" && -n "${USIGN_PUBLIC}" ]]; then
            echo ${USIGN_PUBLIC}  | base64 -d > public.key
            echo ${USIGN_PRIVATE} | base64 -d > private.key
            FINGER_PRINT=$(openwrt-sdk/staging_dir/host/bin/usign -F -p public.key)
            cp public.key ipks_built/${FINGER_PRINT}
            openwrt-sdk/staging_dir/host/bin/usign -S -m ipks_built/Packages -s private.key
            rm -rf private.key
          fi
        env:
          USIGN_PUBLIC:  ${{ secrets.USIGN_PUBLIC }}
          USIGN_PRIVATE: ${{ secrets.USIGN_PRIVATE }}

      - name: Upload build cache
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.name }}
          path: |
            openwrt-sdk
            ipks_feed

      - name: Clean old release and tags
        run: |
          if gh release view openwrt-${{ matrix.target.name }} >/dev/null 2>&1; then
            gh release delete openwrt-${{ matrix.target.name }} --cleanup-tag --yes
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Update openwrt release
        uses: ncipollo/release-action@v1
        with:
          tag: openwrt-${{ matrix.target.name }}
          body: build openwrt packages
          allowUpdates: true
          removeArtifacts: true
          artifacts: ipks_built/*
          token: ${{ github.token }}

